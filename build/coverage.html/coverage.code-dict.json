{"/home/travis/build/npmtest/node-npmtest-ansi/test.js":"/* istanbul instrument in package npmtest_ansi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ansi/lib.npmtest_ansi.js":"/* istanbul instrument in package npmtest_ansi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ansi = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ansi = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ansi/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ansi && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ansi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ansi\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ansi.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ansi.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ansi.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ansi.__dirname + '/lib.npmtest_ansi.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ansi/node_modules/ansi/lib/ansi.js":"\n/**\n * References:\n *\n *   - http://en.wikipedia.org/wiki/ANSI_escape_code\n *   - http://www.termsys.demon.co.uk/vtansi.htm\n *\n */\n\n/**\n * Module dependencies.\n */\n\nvar emitNewlineEvents = require('./newlines')\n  , prefix = '\\x1b[' // For all escape codes\n  , suffix = 'm'     // Only for color codes\n\n/**\n * The ANSI escape sequences.\n */\n\nvar codes = {\n    up: 'A'\n  , down: 'B'\n  , forward: 'C'\n  , back: 'D'\n  , nextLine: 'E'\n  , previousLine: 'F'\n  , horizontalAbsolute: 'G'\n  , eraseData: 'J'\n  , eraseLine: 'K'\n  , scrollUp: 'S'\n  , scrollDown: 'T'\n  , savePosition: 's'\n  , restorePosition: 'u'\n  , queryPosition: '6n'\n  , hide: '?25l'\n  , show: '?25h'\n}\n\n/**\n * Rendering ANSI codes.\n */\n\nvar styles = {\n    bold: 1\n  , italic: 3\n  , underline: 4\n  , inverse: 7\n}\n\n/**\n * The negating ANSI code for the rendering modes.\n */\n\nvar reset = {\n    bold: 22\n  , italic: 23\n  , underline: 24\n  , inverse: 27\n}\n\n/**\n * The standard, styleable ANSI colors.\n */\n\nvar colors = {\n    white: 37\n  , black: 30\n  , blue: 34\n  , cyan: 36\n  , green: 32\n  , magenta: 35\n  , red: 31\n  , yellow: 33\n  , grey: 90\n  , brightBlack: 90\n  , brightRed: 91\n  , brightGreen: 92\n  , brightYellow: 93\n  , brightBlue: 94\n  , brightMagenta: 95\n  , brightCyan: 96\n  , brightWhite: 97\n}\n\n\n/**\n * Creates a Cursor instance based off the given `writable stream` instance.\n */\n\nfunction ansi (stream, options) {\n  if (stream._ansicursor) {\n    return stream._ansicursor\n  } else {\n    return stream._ansicursor = new Cursor(stream, options)\n  }\n}\nmodule.exports = exports = ansi\n\n/**\n * The `Cursor` class.\n */\n\nfunction Cursor (stream, options) {\n  if (!(this instanceof Cursor)) {\n    return new Cursor(stream, options)\n  }\n  if (typeof stream != 'object' || typeof stream.write != 'function') {\n    throw new Error('a valid Stream instance must be passed in')\n  }\n\n  // the stream to use\n  this.stream = stream\n\n  // when 'enabled' is false then all the functions are no-ops except for write()\n  this.enabled = options && options.enabled\n  if (typeof this.enabled === 'undefined') {\n    this.enabled = stream.isTTY\n  }\n  this.enabled = !!this.enabled\n\n  // then `buffering` is true, then `write()` calls are buffered in\n  // memory until `flush()` is invoked\n  this.buffering = !!(options && options.buffering)\n  this._buffer = []\n\n  // controls the foreground and background colors\n  this.fg = this.foreground = new Colorer(this, 0)\n  this.bg = this.background = new Colorer(this, 10)\n\n  // defaults\n  this.Bold = false\n  this.Italic = false\n  this.Underline = false\n  this.Inverse = false\n\n  // keep track of the number of \"newlines\" that get encountered\n  this.newlines = 0\n  emitNewlineEvents(stream)\n  stream.on('newline', function () {\n    this.newlines++\n  }.bind(this))\n}\nexports.Cursor = Cursor\n\n/**\n * Helper function that calls `write()` on the underlying Stream.\n * Returns `this` instead of the write() return value to keep\n * the chaining going.\n */\n\nCursor.prototype.write = function (data) {\n  if (this.buffering) {\n    this._buffer.push(arguments)\n  } else {\n    this.stream.write.apply(this.stream, arguments)\n  }\n  return this\n}\n\n/**\n * Buffer `write()` calls into memory.\n *\n * @api public\n */\n\nCursor.prototype.buffer = function () {\n  this.buffering = true\n  return this\n}\n\n/**\n * Write out the in-memory buffer.\n *\n * @api public\n */\n\nCursor.prototype.flush = function () {\n  this.buffering = false\n  var str = this._buffer.map(function (args) {\n    if (args.length != 1) throw new Error('unexpected args length! ' + args.length);\n    return args[0];\n  }).join('');\n  this._buffer.splice(0); // empty\n  this.write(str);\n  return this\n}\n\n\n/**\n * The `Colorer` class manages both the background and foreground colors.\n */\n\nfunction Colorer (cursor, base) {\n  this.current = null\n  this.cursor = cursor\n  this.base = base\n}\nexports.Colorer = Colorer\n\n/**\n * Write an ANSI color code, ensuring that the same code doesn't get rewritten.\n */\n\nColorer.prototype._setColorCode = function setColorCode (code) {\n  var c = String(code)\n  if (this.current === c) return\n  this.cursor.enabled && this.cursor.write(prefix + c + suffix)\n  this.current = c\n  return this\n}\n\n\n/**\n * Set up the positional ANSI codes.\n */\n\nObject.keys(codes).forEach(function (name) {\n  var code = String(codes[name])\n  Cursor.prototype[name] = function () {\n    var c = code\n    if (arguments.length > 0) {\n      c = toArray(arguments).map(Math.round).join(';') + code\n    }\n    this.enabled && this.write(prefix + c)\n    return this\n  }\n})\n\n/**\n * Set up the functions for the rendering ANSI codes.\n */\n\nObject.keys(styles).forEach(function (style) {\n  var name = style[0].toUpperCase() + style.substring(1)\n    , c = styles[style]\n    , r = reset[style]\n\n  Cursor.prototype[style] = function () {\n    if (this[name]) return this\n    this.enabled && this.write(prefix + c + suffix)\n    this[name] = true\n    return this\n  }\n\n  Cursor.prototype['reset' + name] = function () {\n    if (!this[name]) return this\n    this.enabled && this.write(prefix + r + suffix)\n    this[name] = false\n    return this\n  }\n})\n\n/**\n * Setup the functions for the standard colors.\n */\n\nObject.keys(colors).forEach(function (color) {\n  var code = colors[color]\n\n  Colorer.prototype[color] = function () {\n    this._setColorCode(this.base + code)\n    return this.cursor\n  }\n\n  Cursor.prototype[color] = function () {\n    return this.foreground[color]()\n  }\n})\n\n/**\n * Makes a beep sound!\n */\n\nCursor.prototype.beep = function () {\n  this.enabled && this.write('\\x07')\n  return this\n}\n\n/**\n * Moves cursor to specific position\n */\n\nCursor.prototype.goto = function (x, y) {\n  x = x | 0\n  y = y | 0\n  this.enabled && this.write(prefix + y + ';' + x + 'H')\n  return this\n}\n\n/**\n * Resets the color.\n */\n\nColorer.prototype.reset = function () {\n  this._setColorCode(this.base + 39)\n  return this.cursor\n}\n\n/**\n * Resets all ANSI formatting on the stream.\n */\n\nCursor.prototype.reset = function () {\n  this.enabled && this.write(prefix + '0' + suffix)\n  this.Bold = false\n  this.Italic = false\n  this.Underline = false\n  this.Inverse = false\n  this.foreground.current = null\n  this.background.current = null\n  return this\n}\n\n/**\n * Sets the foreground color with the given RGB values.\n * The closest match out of the 216 colors is picked.\n */\n\nColorer.prototype.rgb = function (r, g, b) {\n  var base = this.base + 38\n    , code = rgb(r, g, b)\n  this._setColorCode(base + ';5;' + code)\n  return this.cursor\n}\n\n/**\n * Same as `cursor.fg.rgb(r, g, b)`.\n */\n\nCursor.prototype.rgb = function (r, g, b) {\n  return this.foreground.rgb(r, g, b)\n}\n\n/**\n * Accepts CSS color codes for use with ANSI escape codes.\n * For example: `#FF000` would be bright red.\n */\n\nColorer.prototype.hex = function (color) {\n  return this.rgb.apply(this, hex(color))\n}\n\n/**\n * Same as `cursor.fg.hex(color)`.\n */\n\nCursor.prototype.hex = function (color) {\n  return this.foreground.hex(color)\n}\n\n\n// UTIL FUNCTIONS //\n\n/**\n * Translates a 255 RGB value to a 0-5 ANSI RGV value,\n * then returns the single ANSI color code to use.\n */\n\nfunction rgb (r, g, b) {\n  var red = r / 255 * 5\n    , green = g / 255 * 5\n    , blue = b / 255 * 5\n  return rgb5(red, green, blue)\n}\n\n/**\n * Turns rgb 0-5 values into a single ANSI color code to use.\n */\n\nfunction rgb5 (r, g, b) {\n  var red = Math.round(r)\n    , green = Math.round(g)\n    , blue = Math.round(b)\n  return 16 + (red*36) + (green*6) + blue\n}\n\n/**\n * Accepts a hex CSS color code string (# is optional) and\n * translates it into an Array of 3 RGB 0-255 values, which\n * can then be used with rgb().\n */\n\nfunction hex (color) {\n  var c = color[0] === '#' ? color.substring(1) : color\n    , r = c.substring(0, 2)\n    , g = c.substring(2, 4)\n    , b = c.substring(4, 6)\n  return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)]\n}\n\n/**\n * Turns an array-like object into a real array.\n */\n\nfunction toArray (a) {\n  var i = 0\n    , l = a.length\n    , rtn = []\n  for (; i<l; i++) {\n    rtn.push(a[i])\n  }\n  return rtn\n}\n","/home/travis/build/npmtest/node-npmtest-ansi/node_modules/ansi/lib/newlines.js":"\n/**\n * Accepts any node Stream instance and hijacks its \"write()\" function,\n * so that it can count any newlines that get written to the output.\n *\n * When a '\\n' byte is encountered, then a \"newline\" event will be emitted\n * on the stream, with no arguments. It is up to the listeners to determine\n * any necessary deltas required for their use-case.\n *\n * Ex:\n *\n *   var cursor = ansi(process.stdout)\n *     , ln = 0\n *   process.stdout.on('newline', function () {\n *    ln++\n *   })\n */\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert')\nvar NEWLINE = '\\n'.charCodeAt(0)\n\nfunction emitNewlineEvents (stream) {\n  if (stream._emittingNewlines) {\n    // already emitting newline events\n    return\n  }\n\n  var write = stream.write\n\n  stream.write = function (data) {\n    // first write the data\n    var rtn = write.apply(stream, arguments)\n\n    if (stream.listeners('newline').length > 0) {\n      var len = data.length\n        , i = 0\n      // now try to calculate any deltas\n      if (typeof data == 'string') {\n        for (; i<len; i++) {\n          processByte(stream, data.charCodeAt(i))\n        }\n      } else {\n        // buffer\n        for (; i<len; i++) {\n          processByte(stream, data[i])\n        }\n      }\n    }\n\n    return rtn\n  }\n\n  stream._emittingNewlines = true\n}\nmodule.exports = emitNewlineEvents\n\n\n/**\n * Processes an individual byte being written to a stream\n */\n\nfunction processByte (stream, b) {\n  assert.equal(typeof b, 'number')\n  if (b === NEWLINE) {\n    stream.emit('newline')\n  }\n}\n"}